{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","IndexPage","_ref","data","a","createElement","title","allMarkdownRemark","totalCount","edges","map","_ref2","node","to","fields","slug","style","textDecoration","color","key","id","frontmatter","date","excerpt","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","siteTitle","react_default","gatsby_browser_entry","position","height","marginBottom","bottom","maxWidth","padding","zIndex","margin","alt","top","left","right","width","objectFit","placeholderImage","childImageSharp","fluid","sizes","_2454360099","defaultProps","Layout","Fragment","header","site","siteMetadata","paddingTop","Date","getFullYear","href","_755544856","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","arrayOf"],"mappings":"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","file":"component---src-pages-index-js-089ba7f2b3afa36836fa.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\n// eslint-disable-next-line react/prop-types\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <div>\n      <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n      {data.allMarkdownRemark.edges.map(({ node }) => (\n        <Link to={node.fields.slug} style={{ textDecoration: 'none', color: 'black'}}>\n          <div key={node.id}>\n            <h3>\n              {node.frontmatter.title} <span>â€” {node.frontmatter.date}</span>\n            </h3>\n            <p>{node.excerpt}</p>\n          </div>\n        </Link>\n      ))}\n    </div>\n  </Layout>\n)\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link, StaticQuery, graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"portugal.jpg\" }) {\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      <header\n        style={{\n          position: \"relative\",\n          height: '30vh',\n          marginBottom: '1.4rem'\n        }}\n      >\n          <div\n              style={{\n                  position: 'absolute',\n                  bottom: '1rem',\n                  maxWidth: 960,\n                  padding: `1.45rem 1.0875rem`,\n                  zIndex:1\n              }}\n          >\n              <h1 style={{ margin: 0 }}>\n                  <Link\n                      to=\"/\"\n                      style={{\n                          color: `white`,\n                          textDecoration: `none`,\n                      }}\n                  >\n                      {siteTitle}\n                  </Link>\n              </h1>\n          </div>\n        <img\n          alt=\"hero\"\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            width: \"100%\",\n            height: \"100%\",\n            objectFit: \"cover\",\n              zIndex:0\n          }}\n          {...data.placeholderImage.childImageSharp.fluid}\n          sizes=\"100vw\"\n        />\n\n      </header>\n    )}\n  />\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            Â© {new Date().getFullYear()}, Built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}